def flairControlPanel() {
  dynamicPage(name: 'flairControlPanel', title: 'Flair Control Panel', install: false, uninstall: false) {
    def vents = getChildDevices()?.findAll { it.hasAttribute('percent-open') } ?: []
    if (!vents) {
      section {
        paragraph 'No vents available. Run discovery from the main page.'
      }
      return
    }

    // Build 1 representative device per room
    def byRoom = [:]
    vents.each { v ->
      def rid = v.currentValue('room-id') ?: v.getDeviceNetworkId()
      if (!byRoom.containsKey(rid)) { byRoom[rid] = [] }
      byRoom[rid] << v
    }

    // Actions (apply immediately when buttons are pressed)
    byRoom.each { roomId, list ->
      def v = list[0]
      def roomName = v.currentValue('room-name') ?: v.getLabel()
      def tempC = v.currentValue('room-current-temperature-c')
      def setpC = v.currentValue('room-set-point-c')
      def active = (v.currentValue('room-active') ?: 'false')
      def toF = { c -> c != null ? (((c as BigDecimal) * 9/5) + 32) : null }
      def fmt1 = { x -> x != null ? (((x as BigDecimal) * 10).round() / 10) : '-' }
      def tempF = fmt1(toF(tempC))
      def setpF = fmt1(toF(setpC))

      section("${roomName}") {
        paragraph "Temp: <b>${tempF}&deg;F</b> | Setpoint: <b>${setpF}&deg;F</b> | Active: <b>${active}</b>"
        // Per-room setpoint nudge buttons
        input name: "cp_room_${roomId}_sp_down", type: 'button', title: 'Setpoint -1°F', submitOnChange: true
        input name: "cp_room_${roomId}_sp_up", type: 'button', title: 'Setpoint +1°F', submitOnChange: true
        input name: "cp_room_${roomId}_active", type: 'enum', title: 'Set room active', options: ['true','false'], submitOnChange: true

        // Render vents
        list.each { dv ->
          def lvl = (dv.currentValue('percent-open') ?: dv.currentValue('level') ?: 0)
          paragraph "- ${dv.getLabel()}: ${lvl}%"
        }

        // Handle presses inline
        if (settings?."cp_room_${roomId}_sp_up" ) {
          try {
            BigDecimal curF = setpF as BigDecimal
            patchRoomSetPoint(v, (curF + 1) as BigDecimal)
          } catch (ignore) { }
          app.updateSetting("cp_room_${roomId}_sp_up", '')
        }
        if (settings?."cp_room_${roomId}_sp_down" ) {
          try {
            BigDecimal curF = setpF as BigDecimal
            patchRoomSetPoint(v, (curF - 1) as BigDecimal)
          } catch (ignore) { }
          app.updateSetting("cp_room_${roomId}_sp_down", '')
        }
        def sel = settings?."cp_room_${roomId}_active”
        if (sel != null && sel != '') {
          try { patchRoom(v, sel) } catch (ignore) { }
          app.updateSetting("cp_room_${roomId}_active", '')
        }
      }
    }

    section {
      href name: 'backToMain', title: 'Back to Main', description: 'Return to main settings', page: 'mainPage'
    }
  }
}

