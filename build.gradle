plugins {
    id 'groovy'
    id 'jacoco'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileGroovy {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileTestGroovy {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    main {
        groovy { srcDirs = ['src'] }
    }
    test {
        groovy {
            srcDirs = ['src/test/groovy']
            exclude 'app/devices/**', 'app/concurrency/**', 'drivers/**'
        }
        resources { srcDirs = ['src/test/resources'] }
    }
    hubitatCiTest {
        groovy {
            srcDirs = ['tests', 'src/test/groovy/app/devices', 'src/test/groovy/drivers']
        }
        resources { srcDirs = ['src/test/resources'] }
        compileClasspath += sourceSets.main.output + configurations.testImplementation
        runtimeClasspath  += output + compileClasspath + configurations.testRuntimeOnly
    }
}

configurations {
    hubitatCiTestImplementation.extendsFrom testImplementation
    hubitatCiTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.named('compileGroovy') { enabled = false }

tasks.withType(GroovyCompile).configureEach {
    groovyOptions.verbose = true
    groovyOptions.fork = true
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    finalizedBy jacocoTestCoverageVerification

    sourceDirectories.from = sourceSets.main.allSource.srcDirs
    classDirectories.from = sourceSets.main.output

    executionData.from = fileTree(dir: "$buildDir/jacoco", includes: ['**/*.exec'])

    doFirst {
        println "JaCoCo execution data files found:"
        executionData.files.each { file ->
            if (file.exists()) {
                println "  - ${file.absolutePath} (${file.length()} bytes)"
            } else {
                println "  - ${file.absolutePath} (NOT FOUND)"
            }
        }
        println "Source directories:"
        sourceDirectories.files.each { dir -> println "  - ${dir.absolutePath}" }
        println "Class directories:"
        classDirectories.files.each { dir -> println "  - ${dir.absolutePath}" }
    }
}

// Default test task settings
test {
    systemProperty 'jacoco.destfile', "$buildDir/jacoco/test.exec"
    systemProperty 'jacoco.append', 'false'
    systemProperty 'jacoco.includes', '**'
    systemProperty 'jacoco.excludes', ''

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }

    scanForTestClasses = true
    include '**/*Test.class'
    include '**/*Tests.class'
    include '**/*Spec.class'

    exclude '**/perf/**/*Spec.class'
}

// Hubitat CI dependent tests (run only when creds exist)
tasks.register('hubitatCiTest', Test) {
    description = 'Runs tests that require me.biocomp:hubitat_ci'
    group = 'verification'
    testClassesDirs = sourceSets.hubitatCiTest.output.classesDirs
    classpath       = sourceSets.hubitatCiTest.runtimeClasspath
    useJUnitPlatform()
    onlyIf { (findProperty('azurePAT') ?: System.getenv('AZURE_PAT')) }
}

// Optional slow tests
// task slowTest(type: Test) { ... } // omitted for brevity; can be re-added if needed

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        failOnViolation = false
        rule {
            limit { minimum = 0.60 }
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo1.maven.org/maven2/' }
    maven {
        name = 'HubitatCI'
        url = uri('https://biocomp.pkgs.visualstudio.com/HubitatCiRelease/_packaging/hubitat_ci_feed@Release/maven/v1')
        credentials {
            username = findProperty('azureUser') ?: System.getenv('AZURE_USER') ?: ''
            password = findProperty('azurePAT')  ?: System.getenv('AZURE_PAT')  ?: ''
        }
    }
}

dependencies {
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'org.codehaus.groovy:groovy-all:3.0.9'
    implementation 'org.codehaus.groovy:groovy-dateutil:3.0.9'
    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    // Base tests (no private deps)
    testImplementation platform('org.spockframework:spock-bom:2.3-groovy-3.0')
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.21'
    testImplementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    testImplementation 'net.bytebuddy:byte-buddy:1.12.18'
    testImplementation 'junit:junit:4.13.2'

    // Hubitat CI dependent tests
    hubitatCiTestImplementation platform('org.spockframework:spock-bom:2.3-groovy-3.0')
    hubitatCiTestImplementation 'org.spockframework:spock-core'
    hubitatCiTestImplementation 'org.codehaus.groovy:groovy-all:3.0.21'
    hubitatCiTestImplementation "me.biocomp:hubitat_ci:${findProperty('hubitatCiVersion') ?: 'LATEST'}"
}